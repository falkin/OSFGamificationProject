{
  "name": "endtable",
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/index",
  "version": "1.1.0",
  "author": {
    "name": "Ben Coe",
    "email": "bencoe@gmail.com"
  },
  "dependencies": {
    "connect": "=1.8.2",
    "request": "=2.2.9"
  },
  "engines": [
    "node"
  ],
  "description": "An experimental ORM for CouchDB.",
  "keywords": [
    "couch",
    "couchdb",
    "orm"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/bcoe/endtable.git"
  },
  "readme": "Endtable\n========\n\nEndtable is an experimental ORM built on top of Node.js and CouchDB.\n\nThe concept? long-lived, self-monitoring, objects that persist only periodically as modifications are made to them.\n\nThis paradigm reduces the frequency with which writes are made to the database, and works well for domains such as games.\n\nThe Engine Object\n-----------------\n\nA single engine object is instantiated and passed as a dependency to an Endtable Class:\n\n```javascript\nvar engine = new endtable.Engine({\n\tdatabase: 'people_example',\n\thost: 'localhost',\n\tuser: '',\n\tpassword: '',\n\terrorCallback: function(error) {\n\t\t// When views aren't found they raise a warning.\n\t\tsys.puts(JSON.stringify(error));\n\t}\n});\n```\n \nThe Error Callback\n------------------\n\nErrors that occur in Endtable are propagated up to the _errorCallback_ passed to the Engine's constructor.\n\nError objects provide the following information:\n\n* _error.error_ the raw error message.\n* _error.reason_ the reason for the error.\n* _error.raisedByObject_ the underlying object that raised the error.\n* _error.raisedByMethod_ the method that caused the error.\n* _error.raisedByParameters_ the parameters passed to the method that caused the error.\n\nEndtable Classes\n----------------\n\nEndtable Classes describe the ORM-backed objects.\n\n```javascript\nvar Dog = endtable.Object.extend(\n\t{\n\t\tbark: function() {\n\t\t\tsys.puts('Woof!!!');\n\t\t}\n\t},\n\t{\n\t\tengine: engine,\n\t\ttype: 'dog',\n\t\tcustomViews: [\n\t\tfunction lowerName(doc) {\n\t\t\tif(doc.type=='dog')\n\t\t\t  emit(doc.name.toLowerCase(),doc); \n\t\t\t},\n\t\tfunction otherNamedView(doc) { ... }\n\t\t]\n\t}\n);\n```\n\n- The first parameter contains all the methods that will be inherited by objects that instantiate the class.\n- The second parameter provides meta information:\n    - _engine_ is an instance of the Endtable Engine described previously.\n    - _type_ represents the corresponding CouchDB resource name.\n    - _customViews_ is an array containing custom view functions to be\n      created on the couchdb server\n      - all the functions *must* be named functions\n\nCreating ORM-Backed Objects\n---------------------------\n\nOnce you've created some Endtable Classes simply instantiate them to create auto-persisting CouchDB-backed objects.\n\n```javascript\nvar dog = new Dog({\n\tname: 'Spike',\n\towner: 'Benjamin Coe',\n\tcoat: 'soft'\n})\n\nvar dog2 = new Dog({\n\tname: 'Fluffy',\n\towner: 'Eric Brown',\n\tcoat: 'rough'\n}, function(err, message) {\n\t// Called after the first save.\n});\n```\n\nThe first parameter passed to the constructor provides the instance variables for the object.\n\nAn optional callback can be provided for the second parameter and will be executed the first time the object persists to CouchDB.\n\nLoading Objects\n---------------\n\nYou can lookup objects based on any of their keys.\n\nSimply call the _load_ method on an Endtable Class:\n\n\n```javascript\nDog.load({\n\tkeys: ['owner', 'coat'],\n\tkey: ['Benjamin Coe', 'soft']\n}, function(error, obj) {\n\tif (!error) {\n\t\tobj[0].bark();\n\t}\n})\n```\n\n* _keys_ indicates the keys that an object will be looked up by. A CouchDB view will be generated to allow for this lookup.\n* _key_ is a set of concrete values that correspond with the keys described in keys.\n\nYou can also load objects based on a range of values.\n\n```javascript\nPerson.load({\n\tkeys: 'age',\n\tstartkey: 28,\n\tendkey: 50\n}, function(error, obj) {\n\tif (!error) {\n\t\tfor (var i = 0; i < obj.length; i++) {\n\t\t\tobj[i].sayName();\n\t\t}\n\t}\n})\n```\n\nThis will load individuals with an age ranging from 28 to 50.\n\nYou can also load an object with a custom view function applied to it.\n\n```javascript\nDog.load({\n\tkeys: 'name',\n    customView: 'lowerName'\n}, function(error, obj) {\n\tif (!error) {\n\t\tfor (var i = 0; i < obj.length; i++) {\n\t\t\tobj[i].sayName();\n\t\t}\n\t}\n})\n```\n* _customView_ is the name of a custom view function you defined when you defined the object\n* You can add in other parameters to filter the results as shown in previous examples\n\n\nExamples\n--------\n\nRun _node examples/person.js_ to get an idea of Endtable in action.\n\nContributing to Endtable\n----------------------\n \n* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet\n* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it\n* Fork the project\n* Start a feature/bugfix branch\n* Commit and push until you are happy with your contribution\n* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.\n* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.\n\nCopyright\n---------\n\nCopyright (c) 2011 Benjamin Coe. See LICENSE.txt for\nfurther details.\n",
  "readmeFilename": "README.markdown",
  "_id": "endtable@1.1.0",
  "_from": "endtable@"
}
